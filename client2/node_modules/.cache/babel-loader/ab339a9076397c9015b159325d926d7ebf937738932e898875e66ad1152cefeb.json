{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\OnlineProject\\\\client2\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game(_ref) {\n  _s();\n  let {\n    socket,\n    room,\n    isUserFirst\n  } = _ref;\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [playerShape, setPlayerShape] = useState(\"\");\n  const [winner, setWinner] = useState(null);\n\n  // helper function to set the player shape based on the value of isUserFirst\n  function setPlayerShapeBasedOnIsUserFirst(isUserFirst) {\n    if (isUserFirst === 2) {\n      setPlayerShape(\"X\");\n    } else {\n      setPlayerShape(\"O\");\n    }\n  }\n  useEffect(() => {\n    const winner = checkForWinner(board);\n    setWinner(winner);\n  }, [board]);\n\n  // useEffect hook to set the player shape and listen for changes to the game\n  useEffect(() => {\n    setPlayerShapeBasedOnIsUserFirst(isUserFirst);\n    socket.on(\"change_game\", data => {\n      setBoard(data.newBoard);\n      setCurrentPlayer(isUserFirst === 2 ? 'X' : 'O');\n    });\n  }, [socket, isUserFirst]);\n\n  // function to handle clicks on the squares\n  const handleSquareClick = async index => {\n    // if the square is already filled or it's not the current player's turn, do nothing\n    if (board[index] !== null || currentPlayer !== playerShape) {\n      return;\n    }\n\n    // make a copy of the board, update the clicked square, and set the new board\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n\n    // send the updated board to the server and switch the current player\n    await socket.emit(\"updateGame\", {\n      room: room,\n      newBoard: newBoard\n    });\n    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\n  };\n  // function to check if there is a winner\n  function checkForWinner(board) {\n    // check rows\n    for (let i = 0; i < 3; i++) {\n      if (board[i * 3] && board[i * 3] === board[i * 3 + 1] && board[i * 3 + 1] === board[i * 3 + 2]) {\n        return board[i * 3];\n      }\n    }\n    // check columns\n    for (let i = 0; i < 3; i++) {\n      if (board[i] && board[i] === board[i + 3] && board[i + 3] === board[i + 6]) {\n        return board[i];\n      }\n    }\n    // check diagonals\n    if (board[0] && board[0] === board[4] && board[4] === board[8]) {\n      return board[0];\n    }\n    if (board[2] && board[2] === board[4] && board[4] === board[6]) {\n      return board[2];\n    }\n    return null;\n  }\n\n  // function to reset the game\n  function resetGame() {\n    setBoard(Array(9).fill(null));\n    setCurrentPlayer('X');\n    setWinner(null);\n    handleSquareClick(0);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [winner ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"The winner is \", winner, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Play again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"whos turn: \", currentPlayer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"you are: \", playerShape]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isUserFirst\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.map((square, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"square\",\n          disabled: winner,\n          onClick: () => handleSquareClick(index),\n          children: square\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"WkMI3wSZZK8U1wiJHVjW2OH7f+o=\");\n_c = Game;\n;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Game","socket","room","isUserFirst","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","playerShape","setPlayerShape","winner","setWinner","setPlayerShapeBasedOnIsUserFirst","checkForWinner","on","data","newBoard","handleSquareClick","index","emit","i","resetGame","map","square"],"sources":["C:/Users/User/Desktop/OnlineProject/client2/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Game({ socket, room, isUserFirst }) {\r\n    const [board, setBoard] = useState(Array(9).fill(null));\r\n    const [currentPlayer, setCurrentPlayer] = useState('X');\r\n    const [playerShape, setPlayerShape] = useState(\"\");\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    // helper function to set the player shape based on the value of isUserFirst\r\n    function setPlayerShapeBasedOnIsUserFirst(isUserFirst) {\r\n        if (isUserFirst === 2) {\r\n            setPlayerShape(\"X\");\r\n        }\r\n        else{\r\n            setPlayerShape(\"O\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const winner = checkForWinner(board);\r\n        setWinner(winner);\r\n      }, [board]);\r\n      \r\n\r\n    // useEffect hook to set the player shape and listen for changes to the game\r\n    useEffect(() => {\r\n        setPlayerShapeBasedOnIsUserFirst(isUserFirst);\r\n\r\n        socket.on(\"change_game\", (data) => {\r\n          setBoard(data.newBoard);\r\n          setCurrentPlayer(isUserFirst === 2 ? 'X' : 'O');\r\n        });\r\n      }, [socket,isUserFirst]);\r\n\r\n    // function to handle clicks on the squares\r\n    const handleSquareClick = async (index) => {\r\n\r\n        // if the square is already filled or it's not the current player's turn, do nothing\r\n        if (board[index] !== null || currentPlayer !== playerShape) {\r\n            return;\r\n        }\r\n\r\n        // make a copy of the board, update the clicked square, and set the new board\r\n        const newBoard = [...board];\r\n        newBoard[index] = currentPlayer;\r\n        setBoard(newBoard);\r\n\r\n        // send the updated board to the server and switch the current player\r\n        await socket.emit(\"updateGame\", { room: room, newBoard: newBoard });\r\n        setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\r\n\r\n   \r\n    };\r\n    // function to check if there is a winner\r\n    function checkForWinner(board) {\r\n        // check rows\r\n        for (let i = 0; i < 3; i++) {\r\n            if (board[i * 3] && board[i * 3] === board[i * 3 + 1] && board[i * 3 + 1] === board[i * 3 + 2]) {\r\n                return board[i * 3];\r\n            }\r\n        }\r\n        // check columns\r\n        for (let i = 0; i < 3; i++) {\r\n            if (board[i] && board[i] === board[i + 3] && board[i + 3] === board[i + 6]) {\r\n                return board[i];\r\n            }\r\n        }\r\n        // check diagonals\r\n        if (board[0] && board[0] === board[4] && board[4] === board[8]) {\r\n            return board[0];\r\n        }\r\n        if (board[2] && board[2] === board[4] && board[4] === board[6]) {\r\n            return board[2];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // function to reset the game\r\n    function resetGame() {\r\n        setBoard(Array(9).fill(null));\r\n        setCurrentPlayer('X');\r\n        setWinner(null);\r\n        handleSquareClick(0);\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n          {winner ? (\r\n            <>\r\n              <h1>The winner is {winner}!</h1>\r\n              <button onClick={resetGame}>Play again</button>\r\n            </>\r\n          ):null }  \r\n            <>\r\n              <h1>whos turn: {currentPlayer}</h1>\r\n              <h1>you are: {playerShape}</h1>\r\n              <h1>{isUserFirst}</h1>\r\n              <div className=\"board\">\r\n                {board.map((square, index) => (\r\n                  <button\r\n                    key={index}\r\n                    className=\"square\"\r\n                    disabled = {winner}\r\n                    onClick={() => handleSquareClick(index)}\r\n                  >\r\n                    {square}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </>\r\n          \r\n        </div>\r\n      );\r\n      \r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}