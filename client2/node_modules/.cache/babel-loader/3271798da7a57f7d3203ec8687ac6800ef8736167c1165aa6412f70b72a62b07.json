{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\OnlineProject\\\\client2\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game(_ref) {\n  _s();\n  let {\n    socket,\n    room,\n    isUserFirst\n  } = _ref;\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [playerShape, setPlayerShape] = useState(\"\");\n  const [winner, setWinner] = useState(null);\n\n  // helper function to set the player shape based on the value of isUserFirst\n  function setPlayerShapeBasedOnIsUserFirst(isUserFirst) {\n    if (isUserFirst === 2) {\n      setPlayerShape(\"X\");\n    } else {\n      setPlayerShape(\"O\");\n    }\n  }\n\n  // useEffect hook to set the player shape and listen for changes to the game\n  useEffect(() => {\n    setPlayerShapeBasedOnIsUserFirst(isUserFirst);\n    socket.on(\"change_game\", data => {\n      setBoard(data.newBoard);\n      setCurrentPlayer(isUserFirst === 2 ? 'X' : 'O');\n      const winner = checkForWinner(data.newBoard);\n      if (winner) {\n        // if there is a winner, alert the winner and reset the game\n        alert(`The winner is ${winner}!`);\n        resetGame();\n      }\n    });\n  }, [socket, isUserFirst]);\n\n  // function to handle clicks on the squares\n  const handleSquareClick = async index => {\n    // if the square is already filled or it's not the current player's turn, do nothing\n    if (board[index] !== null || currentPlayer !== playerShape) {\n      return;\n    }\n\n    // make a copy of the board, update the clicked square, and set the new board\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n\n    // send the updated board to the server and switch the current player\n    await socket.emit(\"updateGame\", {\n      room: room,\n      newBoard: newBoard\n    });\n    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\n\n    // check if there is a winner\n    const winner = checkForWinner(newBoard);\n    // if there is a winner, alert the winner and reset the game\n    resetGame(winner);\n  };\n}\n_s(Game, \"KpEtwF1462PllIKYotbfr67j1SI=\");\n_c = Game;\n;\n// function to check if there is a winner\nfunction checkForWinner(board) {\n  // check rows\n  for (let i = 0; i < 3; i++) {\n    if (board[i * 3] && board[i * 3] === board[i * 3 + 1] && board[i * 3 + 1] === board[i * 3 + 2]) {\n      return board[i * 3];\n    }\n  }\n  // check columns\n  for (let i = 0; i < 3; i++) {\n    if (board[i] && board[i] === board[i + 3] && board[i + 3] === board[i + 6]) {\n      return board[i];\n    }\n  }\n  // check diagonals\n  if (board[0] && board[0] === board[4] && board[4] === board[8]) {\n    return board[0];\n  }\n  if (board[2] && board[2] === board[4] && board[4] === board[6]) {\n    return board[2];\n  }\n  return null;\n}\n\n// function to reset the game\nfunction resetGame(winner) {\n  if (winner) {\n    alert(`The winner is ${winner}!`);\n    setBoard(Array(9).fill(null));\n    setCurrentPlayer('X');\n    setWinner(null);\n    handleSquareClick(0);\n    {}\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"whos turn: \", currentPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"you are: \", playerShape]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isUserFirst\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((square, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        onClick: () => handleSquareClick(index),\n        children: square\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Game","socket","room","isUserFirst","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","playerShape","setPlayerShape","winner","setWinner","setPlayerShapeBasedOnIsUserFirst","on","data","newBoard","checkForWinner","alert","resetGame","handleSquareClick","index","emit","i","map","square"],"sources":["C:/Users/User/Desktop/OnlineProject/client2/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Game({ socket, room, isUserFirst }) {\r\n    const [board, setBoard] = useState(Array(9).fill(null));\r\n    const [currentPlayer, setCurrentPlayer] = useState('X');\r\n    const [playerShape, setPlayerShape] = useState(\"\");\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    // helper function to set the player shape based on the value of isUserFirst\r\n    function setPlayerShapeBasedOnIsUserFirst(isUserFirst) {\r\n        if (isUserFirst === 2) {\r\n            setPlayerShape(\"X\");\r\n        }\r\n        else{\r\n            setPlayerShape(\"O\")\r\n        }\r\n    }\r\n\r\n    // useEffect hook to set the player shape and listen for changes to the game\r\n    useEffect(() => {\r\n        setPlayerShapeBasedOnIsUserFirst(isUserFirst);\r\n\r\n        socket.on(\"change_game\", (data) => {\r\n          setBoard(data.newBoard);\r\n          setCurrentPlayer(isUserFirst === 2 ? 'X' : 'O');\r\n          const winner = checkForWinner(data.newBoard);\r\n          if (winner) {\r\n              // if there is a winner, alert the winner and reset the game\r\n              alert(`The winner is ${winner}!`);\r\n              resetGame();\r\n          }\r\n        });\r\n      }, [socket,isUserFirst]);\r\n\r\n    // function to handle clicks on the squares\r\n    const handleSquareClick = async (index) => {\r\n\r\n        // if the square is already filled or it's not the current player's turn, do nothing\r\n        if (board[index] !== null || currentPlayer !== playerShape) {\r\n            return;\r\n        }\r\n\r\n        // make a copy of the board, update the clicked square, and set the new board\r\n        const newBoard = [...board];\r\n        newBoard[index] = currentPlayer;\r\n        setBoard(newBoard);\r\n\r\n        // send the updated board to the server and switch the current player\r\n        await socket.emit(\"updateGame\", { room: room, newBoard: newBoard });\r\n        setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\r\n\r\n        // check if there is a winner\r\n        const winner = checkForWinner(newBoard);\r\n            // if there is a winner, alert the winner and reset the game\r\n            resetGame(winner);\r\n        }\r\n    };\r\n    // function to check if there is a winner\r\n    function checkForWinner(board) {\r\n        // check rows\r\n        for (let i = 0; i < 3; i++) {\r\n            if (board[i * 3] && board[i * 3] === board[i * 3 + 1] && board[i * 3 + 1] === board[i * 3 + 2]) {\r\n                return board[i * 3];\r\n            }\r\n        }\r\n        // check columns\r\n        for (let i = 0; i < 3; i++) {\r\n            if (board[i] && board[i] === board[i + 3] && board[i + 3] === board[i + 6]) {\r\n                return board[i];\r\n            }\r\n        }\r\n        // check diagonals\r\n        if (board[0] && board[0] === board[4] && board[4] === board[8]) {\r\n            return board[0];\r\n        }\r\n        if (board[2] && board[2] === board[4] && board[4] === board[6]) {\r\n            return board[2];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // function to reset the game\r\n    function resetGame(winner) {\r\n        if (winner) {\r\n\r\n        alert(`The winner is ${winner}!`);\r\n        setBoard(Array(9).fill(null));\r\n        setCurrentPlayer('X');\r\n        setWinner(null);\r\n        handleSquareClick(0);\r\n        {}\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <h1>whos turn: {currentPlayer}</h1>\r\n            <h1>you are: {playerShape}</h1>\r\n            <h1>{isUserFirst}</h1>\r\n            <div className=\"board\">\r\n                {board.map((square, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"square\"\r\n                        onClick={() => handleSquareClick(index)}\r\n                    >\r\n                        {square}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}